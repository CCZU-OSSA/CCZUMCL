name: Test macOS Signing

on:
  workflow_dispatch:
    inputs:
      test_version:
        description: 'Test version string'
        required: false
        default: '0.0.0'
        type: string
  pull_request:
    paths:
      - '.github/workflows/sign-macos.yml'
      - '.github/workflows/test-sign.yml'

jobs:
  Build-macOS-Test:
    runs-on: macos-latest
    strategy:
      matrix:
        include:
          - target: aarch64-apple-darwin
            arch: aarch64
          - target: x86_64-apple-darwin
            arch: x86_64
    
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin

      - name: Install frontend dependencies
        run: |
          npm install -g pnpm
          pnpm install

      - name: Remove Font files (MacOS)
        run: |
          rm -r public/fonts/Sinter/
          rm src/styles/fonts.css
          touch src/styles/fonts.css
      
      - uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"
          key: macos-${{ matrix.target }}

      - name: Build the app and the DMG image
        run: pnpm run tauri build --bundles app,dmg --target ${{ matrix.target }}
        env:
          SJMCL_MICROSOFT_CLIENT_SECRET: ${{ secrets.SJMCL_MICROSOFT_CLIENT_SECRET }}
          SJMCL_CURSEFORGE_API_KEY: ${{ secrets.SJMCL_CURSEFORGE_API_KEY }}

      - name: Prepare test artifacts
        shell: bash
        env:
          VERSION: ${{ inputs.test_version || 'test-1.0.0' }}
        run: |
          ARTIFACT_NAME="SJMCL_${{ env.VERSION }}_macos_${{ matrix.arch }}"
          echo "Artifact Name: $ARTIFACT_NAME"
          mkdir artifacts
          
          ls src-tauri/target/${{ matrix.target }}/release/bundle/macos
          # Compress the .app folder
          tar -cvzf artifacts/"$ARTIFACT_NAME".app.tar.gz -C "src-tauri/target/${{ matrix.target }}/release/bundle/macos" "SJMCL.app"
          # Copy the DMG files
          mv "src-tauri/target/${{ matrix.target }}/release/bundle/dmg"/*.dmg artifacts/"$ARTIFACT_NAME".dmg
          ls -la artifacts
          
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $GITHUB_ENV

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: SJMCL_${{ inputs.test_version || 'test-1.0.0' }}_macos_${{ matrix.arch }}
          path: "artifacts/*"
          if-no-files-found: error

  Test-Sign-macOS:
    needs: [Build-macOS-Test]
    uses: ./.github/workflows/sign.yml
    with:
      version: ${{ inputs.test_version || '0.0.0' }}
    secrets:
      CERT_P12_BASE64: ${{ secrets.CERT_P12_BASE64 }}
      CERT_P12_PASSWORD: ${{ secrets.CERT_P12_PASSWORD }}
      SIGNING_IDENTITY: ${{ secrets.SIGNING_IDENTITY }}
      NOTARY_APPLE_ID: ${{ secrets.NOTARY_APPLE_ID }}
      NOTARY_PASSWORD: ${{ secrets.NOTARY_PASSWORD }}
      NOTARY_TEAM_ID: ${{ secrets.NOTARY_TEAM_ID }}

  Verify-Signatures:
    needs: [Test-Sign-macOS]
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [aarch64, x86_64]
    
    steps:
      - name: Download signed artifacts
        uses: actions/download-artifact@v4
        with:
          name: SJMCL_${{ inputs.test_version || 'test-1.0.0' }}_macos_${{ matrix.arch }}_signed
          path: signed-artifacts

      - name: Verify .app signature
        run: |
          cd signed-artifacts
          
          # Extract the signed .app
          tar -xzf SJMCL_${{ inputs.test_version || 'test-1.0.0' }}_macos_${{ matrix.arch }}.app.tar.gz
          
          echo "=== Verifying .app signature ==="
          codesign --verify --deep --strict --verbose=2 SJMCL.app
          
          echo "=== Checking .app signature details ==="
          codesign -dv --verbose=4 SJMCL.app
          
          echo "=== Testing Gatekeeper assessment ==="
          spctl --verbose=4 --assess --type execute SJMCL.app

      - name: Verify DMG signature
        run: |
          cd signed-artifacts
          
          echo "=== Verifying DMG signature ==="
          codesign --verify --deep --strict --verbose=2 SJMCL_${{ inputs.test_version || 'test-1.0.0' }}_macos_${{ matrix.arch }}.dmg
          
          echo "=== Checking DMG signature details ==="
          codesign -dv --verbose=4 SJMCL_${{ inputs.test_version || 'test-1.0.0' }}_macos_${{ matrix.arch }}.dmg

      - name: Test signature summary
        run: |
          echo "✅ Successfully verified signatures for macOS ${{ matrix.arch }} artifacts"
          echo "✅ .app bundle is properly signed and notarized"
          echo "✅ DMG is properly signed and notarized"
          echo "✅ Gatekeeper assessment passed"
          echo "✅ Apps will run without security warnings" 